'use strict';
 
angular.module('Authentication', [
    'ngCookies'
])
.provider('authentication', function ProvideAuthentication() {
    var exceptions = ['impressum', 'about'];
    
    return({
        getExceptions: getExceptions,
        setExceptions: setExceptions,
        $get: instantiateAuthentication
    });
    function getExceptions() {
        return(exceptions);
    }
    function setExceptions( newExceptions ) {
        testExceptions( newExceptions );
        exceptions = newExceptions;
    }
    function testExceptions( newExceptions ) {
        if ( ! newExceptions ) {
            throw( new Error( "InvalidExceptions" ) );
        }
    }
    function instantiateAuthentication() {
        return({
            exceptions: function() {
                return exceptions;    
            }
        });
    }
})
.run(['$rootScope', '$location', '$cookieStore', '$http', '$state', 'authentication',
    function ($rootScope, $location, $cookies, $http, $state, authentication) {
        // keep user logged in after page refresh
        $rootScope.globals = $cookies['globals'] || {};
        if ($rootScope.globals.currentUser) {
            $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authdata; // jshint ignore:line
        }
  
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            if ($location.path() !== '/login' && !$rootScope.globals.currentUser) {
                var exceptions = authentication.exceptions();
                var idx = exceptions.indexOf($state.current.name);
                if (idx === -1) {
                    $state.go('login');
                    $location.path('/login');
                }
            }
        });
    }
]);
'use strict';
  

//// declare modules
angular.module('Authentication')
  
.controller('LoginController',
    function ($scope, $rootScope, $location, AuthenticationService) {
        $rootScope.auth_logout = function() {
            // reset login status
            AuthenticationService.ClearCredentials();
        }
  
        $scope.login = function () {
            $scope.dataLoading = true;
            AuthenticationService.Login($scope.username, $scope.password, function(response) {
                if(response.success && response.success != "null") {
                    AuthenticationService.SetCredentials($scope.username, $scope.password);
                    $location.path('/home');
                } else {
                    var errorMsg = "";
                    for (var i = 0; i < response.message.length; i++) {
                        errorMsg += response.message[i];
                        if (i < response.message.length - 1) errorMsg += "<br />";
                    }
                    $scope.error = errorMsg;
                    AuthenticationService.ClearCredentials();
                    $scope.dataLoading = false;
                }
            });
        };
    });
'use strict';
  
angular.module('Authentication')
  
.factory('AuthenticationService', function (Base64, $http, $cookies, $rootScope, $timeout) {
        var service = {};
 
        service.Login = function (username, password, callback) {
            if (true) {
                /* Dummy authentication for testing, uses $timeout to simulate api call
                 ----------------------------------------------*/

                $timeout(function(){
                    var response = { success: username === 'test' && password === 'test' };
                    if(!response.success) {
                        response.message = 'Username or password is incorrect';
                    }
                    callback(response);
                }, 500);


            } else {
                /* Use this for real authentication
                 ----------------------------------------------*/
                $http.post('../login.php', { user: username, pass: password })
                    .success(function (response) {
                        callback(response);
                    });
            };
 
        };
  
        service.SetCredentials = function (username, password) {
            var authdata = Base64.encode(username + ':' + password);
  
            $rootScope.globals = {
                currentUser: {
                    username: username,
                    authdata: authdata
                }
            };
  
            $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
            $cookies.putObject('globals', $rootScope.globals);
        };
  
        service.ClearCredentials = function () {
            $rootScope.globals = {};
            $cookies.remove('globals');
            $http.defaults.headers.common.Authorization = 'Basic ';
        };
  
        return service;
    })
  
.factory('Base64', function () {
    /* jshint ignore:start */
  
    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  
    return {
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;
  
            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
  
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
  
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
  
                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);
  
            return output;
        },
  
        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;
  
            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  
            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));
  
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
  
                output = output + String.fromCharCode(chr1);
  
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
  
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
  
            } while (i < input.length);
  
            return output;
        }
    };
  
    /* jshint ignore:end */
});